# Bambu Filament mappings
# Credit to WolfWithSword for figuring all these out
# https://gist.github.com/WolfwithSword/e3e4dc4f00629cc047b7cefd70d7b350#file-bambu_mqtt-json-L314
select:
  - platform: template
    name: "Filament Type"
    id: filament_type
    state_topic:
    optimistic: true
    icon: mdi:movie-roll
    web_server:
      sorting_group_id: sorting_group_filament_settings
    options:
      - PLA
      - PETG
      - TPU
      - ABS
    on_value:
      then:
        - script.execute: generate_filament_brand_code
        - script.execute: generate_filament_temperatures
        - script.execute: preview_rfid_data #TODO: needed?

  - platform: template
    name: "Filament Brand"
    id: filament_brand
    state_topic:
    optimistic: true
    icon: mdi:alpha-f-circle
    web_server:
      sorting_group_id: sorting_group_filament_settings
    options:
      - Generic
      - Overture
      - PolyTerra
      - PolyLite
    on_value:
      then:
        - script.execute: generate_filament_brand_code
        - script.execute: generate_filament_temperatures
        - script.execute: preview_rfid_data
  - platform: template
    name: "Filament Color"
    id: filament_color
    state_topic:
    icon: mdi:palette-outline
    web_server:
      sorting_group_id: sorting_group_filament_settings
    optimistic: true
    options:
      - ""
      - "white"
      - "yellow"
      - "grass_green"
      - "bambu_green"
      - "missletoe_green"
      - "dark_blue"
      - "glow_green"
      - "ice_blue"
      - "cyan"
      - "blue"
      - "iris_purple"
      - "magenta"
      - "sakura_pink"
      - "pink"
      - "red"
      - "dark_brown"
      - "orange"
      - "beige"
      - "desert_tan"
      - "brown"
      - "ash_grey"
      - "grey"
      - "black"
      - "Unknown"
    on_value:
      then:
        # TODO: instead of doing a mapping for all these colors
        # Do a traditional hex value lookup
        - text_sensor.template.publish:
            id: filament_color_hex
            state: !lambda |-
              ESP_LOGD("main", "Color %s", id(filament_color).state.c_str());
              if ( x == "white") {
                return "FFFFFF";
              } else if ( x == "yellow") {
                return "FFF144";
              } else if ( x == "grass_green") {
                return "DCF478";
              } else if ( x == "bambu_green") {
                return "0ACC38";
              } else if ( x == "missletoe_green") {
                return "057748";
              } else if ( x == "dark_blue") {
                return "0D6284";
              } else if ( x == "glow_green") {
                return "0EE2A0";
              } else if ( x == "ice_blue") {
                return "76D9F4";
              } else if ( x == "cyan") {
                return "46A8F9";
              } else if ( x == "blue") {
                return "2850E0";
              } else if ( x == "iris_purple") {
                return "443089";
              } else if ( x == "purple") {
                return "A03CF7";
              } else if ( x == "magenta") {
                return "F330F9";
              } else if ( x == "sakura_pink") {
                return "D4B1DD";
              } else if ( x == "pink") {
                return "F95D73";
              } else if ( x == "red") {
                return "F72323";
              } else if ( x == "dark_brown") {
                return "7C4B00";
              } else if ( x == "orange") {
                return "F98C36";
              } else if ( x == "beige") {
                return "FCECD6";
              } else if ( x == "desert_tan") {
                return  "D3C5A3";
              } else if ( x == "brown") {
                return "AF7933";
              } else if ( x == "ash_grey") {
                return "898989";
              } else if ( x == "grey") {
                return "BCBCBC";
              } else if ( x == "black") {
                return "161616";
              } else {
                ESP_LOGE("main", "Unknown filament_color_hex: %s", x.c_str());
                return "";
              }
        - script.execute: preview_rfid_data

esphome:
  includes:
    - rgb2hex.h
    - filament_colors.h
  # Filament color is a workaround just so we can get a color picker in the gui
  # Ideally this should but just a raw collor picker and not have a brightness slider
  # or a on/off switch but the Color class doesn't support RGB leds without those 2 things
  # https://discord.com/channels/429907082951524364/1299942698664333385
  # - platform: custom
  #   # name: "Filament Color 2"
  #   id: filament_color2
  #   # state_topic:
  #   # icon: mdi:palette-outline
  #   # optimistic: true
  #   # web_server:
  #   #   sorting_group_id: sorting_group_filament_settings
  #   # on_value:
  #   #   then:
  #   #     - script.execute: preview_rfid_data
  #   lambda: |-
  #      auto light_out = new MyCustomLightOutput();
  #      App.register_component(light_out);
  #      return {light_out};
  #   lights:
  #     - name: "foobar"
light:
  - platform: rgb
    name: "Filament Color 2"
    id: filament_color2
    state_topic:
    icon: mdi:palette-outline
    web_server:
      sorting_group_id: sorting_group_filament_settings
    red: dummy_red
    green: dummy_green
    blue: dummy_blue
    on_state:
      then:
        #TODO: this is always 255 on the first write
        - delay: 50ms #Light component doesn't have optimistic so there is a race condition
        - logger.log:
            format: "Filament Color 2 raw values: R=%.2f, G=%.2f, B=%.2f"
            args: [id(filament_color2).remote_values.get_red(), 
                  id(filament_color2).remote_values.get_green(), 
                  id(filament_color2).remote_values.get_blue()]
        - lambda: |-
            std::string hex_color = float2hex(
                static_cast<float>(id(filament_color2).remote_values.get_red()),
                static_cast<float>(id(filament_color2).remote_values.get_green()),
                static_cast<float>(id(filament_color2).remote_values.get_blue())
            );
            ESP_LOGD("main", "Color %s", hex_color.c_str());
        # - logger.log:
        #     format: "Filament Color 2 changed as rgb: R=%d, G=%d, B=%d"
        #     args: [int(round(id(filament_color2).current_values_as_rgb.get_red() * 255)), 
        #            int(round(id(filament_color2).current_values_as_rgb.get_green() * 255)), 
        #            int(round(id(filament_color2).current_values_as_rgb.get_blue() * 255))]
    # effects:
    #   #TODO: handle clearing the color picker
    #   - lambda:
    #       name: green
    #       update_interval: 60s
    #       lambda: |-
    #         //TODO: only make change once
    #         auto call = id(filament_color2).turn_on();
    #         call.set_rgb(0.0f, 1.0f, 0.0f);
    #         call.set_brightness(1.0f);
    #         call.perform();




    #         //id(round(id(filament_color2).
    #         //ESP_LOGD("main", "Color %s", id(filament_color).state.c_str());
    #         //float red = id(global_red);
    #         //ESP_LOGD("main", "Float red is %f", red);
    #         //float green = id(global_green);
    #         //ESP_LOGD("main", "Float green is %f", green);
    #         //float blue = id(global_blue);
    #         //ESP_LOGD("main", "Float blue is %f", blue);
    #         //auto hex = float2hex(red, green, blue);
    #         //ESP_LOGD("main", "Hex is %s", hex.c_str());
    #         //static auto effect = new SetColorEffect("Red", "FF0000");
    #         //if (initial_run) {
    #         //  effect->init();
    #         //}
    #         //effect->apply();
    #         //id(filament_color_hex3) = esphome::Color(255, 0, 0);
    #         //id(filament_color_hex3) = esphome::Color(0x00FF00);
    #         //id(filament_color_hex2).publish_state("00FF00");

    #   - lambda:
    #       name: red
    #       update_interval: 0s
    #       lambda: |-
    #         static bool executed = false;
    #         if (!executed) {
    #           executed = true;
    #           static int state = 0;
    #           static const char* hex = "FF0000";
    #           auto call = id(filament_color2).turn_on();
    #           call.set_rgb(hex2color(hex).r, hex2color(hex).g, hex2color(hex).b);
    #           id(filament_color_hex2).publish_state(hex);
    #           call.perform();
    #         }
    #   - lambda:
    #       name: blue
    #       update_interval: 0s
    #       lambda: |-
    #         static bool executed = false;
    #         if (!executed) {
    #         executed = true;
    #           static int state = 0;
    #           static const char* hex = "0000FF";
    #           auto call = id(filament_color2).turn_on();
    #           call.set_rgb(hex2color(hex).r, hex2color(hex).g, hex2color(hex).b);
    #           id(filament_color_hex2).publish_state(hex);
    #           call.perform();
    #         }


globals:
  - id: global_red
    type: float
    initial_value: '0'
  - id: global_green
    type: float
    initial_value: '0'
  - id: global_blue
    type: float
    initial_value: '0'
  - id: filament_color_hex3
    type: esphome::Color
    # initial_value: 'Color(255,0,0)'

output:
  - platform: template
    id: dummy_red
    type: float
    write_action:
      - globals.set:
          id: global_red
          value: !lambda "return state;"

  - platform: template
    id: dummy_green
    type: float
    write_action:
      - globals.set:
          id: global_green
          value: !lambda "return state;"

  - platform: template
    id: dummy_blue
    type: float
    write_action:
      - globals.set:
          id: global_blue
          value: !lambda "return state;"
number:
  - platform: template
    name: "Filament Min Temp"
    id: filament_min_temp
    min_value: 150
    max_value: 300
    unit_of_measurement: Â°C
    step: 5
    state_topic:
    icon: mdi:thermometer-low
    optimistic: true
    web_server:
      sorting_group_id: sorting_group_filament_settings
    set_action:
      then:
        - lambda: |-
            id(filament_min_temp).publish_state(int(round(x)));
            if (id(filament_min_temp).state > id(filament_max_temp).state) {
              id(filament_max_temp).publish_state(id(filament_min_temp).state);
            }
    on_value:
      then:
        - script.execute: preview_rfid_data

  - platform: template
    name: "Filament Max Temp"
    id: filament_max_temp
    min_value: 150
    max_value: 300
    initial_value: 300
    unit_of_measurement: Â°C
    step: 5
    state_topic:
    icon: mdi:thermometer-high
    optimistic: true
    web_server:
      sorting_group_id: sorting_group_filament_settings
    set_action:
      then:
        - lambda: |-
            id(filament_max_temp).publish_state(int(round(x)));
            if (id(filament_max_temp).state < id(filament_min_temp).state) {
              id(filament_min_temp).publish_state(id(filament_max_temp).state);
            }
    on_value:
      then:
        - script.execute: preview_rfid_data

text_sensor:
  - platform: template
    name: "Filament Brand Code"
    id: filament_brand_code
    state_topic:
    icon: mdi:code-brackets
    web_server:
      sorting_group_id: sorting_group_filament_settings
    on_value:
      then:
        - script.execute: preview_rfid_data

  - platform: template
    name: "Filament Color Hex"
    id: filament_color_hex
    state_topic:
    icon: mdi:hexagon-outline
    web_server:
      sorting_group_id: sorting_group_filament_settings
    on_value:
      then:
        - lambda: |-
            if (x != "") {
              id(filament_color_hex_bambu).publish_state(x + "FF");
            } else {
              id(filament_color_hex_bambu).publish_state("");
            }
        - script.execute: preview_rfid_data


  - platform: template
    name: "Filament Color Hex 2"
    id: filament_color_hex2
    state_topic:
    icon: mdi:hexagon-outline
    web_server:
      sorting_group_id: sorting_group_filament_settings
    on_value:
      then:
        # - lambda: |-
        #     if (x != "") {
        #       id(filament_color_hex_bambu).publish_state(x + "FF");
        #     } else {
        #       id(filament_color_hex_bambu).publish_state("");
        #     }
        - script.execute: preview_rfid_data

  - platform: template
    name: "Filament Color Hex Bambu"
    id: filament_color_hex_bambu
    state_topic:
    icon: mdi:hexagon-outline
    web_server:
      sorting_group_id: sorting_group_filament_settings
    on_value:
      then:
        - script.execute: preview_rfid_data

  - platform: template
    name: Filament Sub Brand
    id: filament_sub_brand
    state_topic:
    icon: mdi:movie-roll #TODO: change
    web_server:
      sorting_group_id: sorting_group_filament_settings
    on_value:
      then:
        - script.execute: preview_rfid_data

button:
  - platform: template
    id: upload_filament_settings
    name: Upload Settings
    state_topic:
    icon: mdi:upload
    web_server:
      sorting_group_id: sorting_group_filament_settings
    on_press:
      then:
        - script.execute: publish_filament_setting
